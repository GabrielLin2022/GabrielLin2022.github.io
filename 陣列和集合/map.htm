<meta charset="UTF-8" />
<script>

/*
map() 特色
會透過函式內所回傳的值組合成一個新的陣列
並不會改變原陣列
回傳數量會等於原始陣列的長度
如果不回傳則是 undefined
簡單來說就是我們若用陣列使用 map() 方法呼叫函式的話，就可以讓陣列中每個元素執行完該函式後，
將每個元素的執行結果回傳到一個新的陣列。
範例
假如我是一個包租婆，陣列A儲存我每間房收的房租，但我最近比較缺錢所以打算漲個價斂財，每間房子直接改收兩倍的租金，
這時候就可以使用 map() 方法快速計算每間房子漲價後的房租，並儲存在B陣列中：
*/
let A = [9000, 8500, 5500, 6500];
let B = A.map(function (value, index, array) {
    return value*2;
});

console.log(A) // [9000, 8500, 5500, 6500] - 原陣列不會被修改
console.log(B) // [18000, 17000, 11000, 13000] - 發財摟 ^____^

let arr =[1,10,25];
console.log(arr);

let mapArr = arr.map(x => x*2);
console.log(mapArr); 
/*
“ const ”— 一般使用在識別值(identifier)不會被重新指定值。例如：宣告恆定不做改變的變數 — 
const PI = 3.14159。這也意味著，const在宣告變數時就會進行初始化，無法等到之後再賦予值，
因此必定要在一開始就給予值作宣告，否則將會報錯。

“let”— 一般使用在變數(variable)可能會被重新指定值。例如：在迴圈(for loop)中，一開始的變數宣告使用。
也可以說較常使用在函式(function)自行定義的區塊(block)中。

“var”— 在ES6推出“let”宣告方法後，JavaScript最弱的變數宣告，使用在變數可能或不會被重新賦予值，或者宣告範圍
在整個函式(function)或者區塊(block)中。*/
</script>

