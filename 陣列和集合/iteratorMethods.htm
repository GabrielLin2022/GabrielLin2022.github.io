<meta charset="UTF-8" />
<script>
//entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对
array1=[10, 20, 30, 40, 50];
console.log("原始陣列", array1)
//entries()
var iterator1 = array1.entries();
console.log( iterator1.next().value );  //  Array [0, 10]

//values()
var iterator1 = array1.values();
console.log( iterator1.next().value ); // 10

//filter()
var filtered = array1.filter(value => value > 25);
console.log( filtered )  // [30, 40, 50]

/*箭頭函式
基本語法
(參數1, 參數2, …, 參數N) => { 陳述式; }

(參數1, 參數2, …, 參數N) => 表示式;
// 等相同(參數1, 參數2, …, 參數N) => { return 表示式; }

// 只有一個參數時,括號才能不加:
(單一參數) => { 陳述式; }
單一參數 => { 陳述式; }

//若無參數，就一定要加括號:
() => { statements }
*/
function greeting(){
    console.log("Hello");
}
greeting();
//改成箭頭的寫法
var greeting = () => {
    console.log("Hello2");
}

greeting();

var greeting = () =>"Welcome"
console.log(greeting());
//其實等於這個寫法
var greeting =  function(){
    return "Welcome"
}


var arr = ["a", "b", "c"];
var iter = arr.entries();
var a = [];

// for(var i=0; i< arr.length; i++){   // 实际使用的是这个
for(var i=0; i< arr.length+1; i++){    // 注意，是length+1，比数组的长度大
    var tem = iter.next();             // 每次迭代时更新next
    console.log(tem.done);             // 这里可以看到更新后的done都是false
    if(tem.done !== true){             // 遍历迭代器结束done才是true
        console.log(tem.value);
        a[i]=tem.value;
    }
}
</script>
